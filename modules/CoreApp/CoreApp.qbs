/****************************************************************************}
{ CoreApp.qbs - base application class                                       }
{                                                                            }
{ Copyright (c) 2018 Alexey Parfenov <zxed@alkatrazstudio.net>               }
{                                                                            }
{ This library is free software: you can redistribute it and/or modify it    }
{ under the terms of the GNU General Public License as published by          }
{ the Free Software Foundation, either version 3 of the License,             }
{ or (at your option) any later version.                                     }
{                                                                            }
{ This library is distributed in the hope that it will be useful,            }
{ but WITHOUT ANY WARRANTY; without even the implied warranty of             }
{ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU           }
{ General Public License for more details: https://gnu.org/licenses/gpl.html }
{****************************************************************************/

import qbs
import qbs.FileInfo
import qbs.TextFile

Module {
    property string singleInstanceKey: ''
    property bool dummyWindow: false
    property bool sessionHandling: false

    Depends {name: 'cpp'}
    Depends {
        name: 'Qt'
        submodules: {
            var mods = ['core']
            if(singleInstanceKey)
                mods.push('network')
            if(dummyWindow || sessionHandling)
                mods.push('gui')
            if(dummyWindow)
                mods.push('widgets')
            return mods
        }
    }
    Depends {name: 'ErrorManager'}

    Rule {
        multiplex: true
        Artifact {
            filePath: 'generated/coreapp/include/coreapp_defines.h'
            fileTags: 'hpp'
        }
        prepare: {
            var cmd = new JavaScriptCommand()
            cmd.description = 'generating ' + output.fileName
            cmd.sourceCode = function() {
                var f = new TextFile(output.filePath, TextFile.WriteOnly)
                f.writeLine('// This file is autogenerated each rebuild.')
                f.writeLine('#pragma once')
                f.writeLine('#ifdef QT_QML_LIB')
                f.writeLine('    #include <array>')
                f.writeLine('#endif')
                if(product.CoreApp.singleInstanceKey)
                    f.writeLine('#define COREAPP_SINGLEKEY "'+product.CoreApp.singleInstanceKey+'"')
                if(product.CoreApp.dummyWindow)
                    f.writeLine('#define COREAPP_DUMMYWIN')
                if(product.CoreApp.sessionHandling)
                    f.writeLine('#define COREAPP_SESSHANDLE')

                var qmlImportPaths = []
                if(product.qmlImportPaths && product.qmlImportPaths.length)
                {
                    qmlImportPaths = product.qmlImportPaths
                        .map(function(s){return FileInfo.relativePath(product.sourceDirectory, s)})
                }

                f.writeLine('#ifdef QT_QML_LIB')
                f.writeLine('    constexpr const std::array<const char*, '+qmlImportPaths.length+'> COREAPP_QML_IMPORT_PATHS = {{')
                qmlImportPaths.forEach(function(c){f.writeLine('        "'+c+'",')})
                f.writeLine('    }};')
                f.writeLine('#endif')

                f.close()
            }
            return cmd
        }
    }

    Group {
        name: 'CoreApp'
        files: ['coreapp.cpp', 'coreapp.h']
    }

    cpp.includePaths: [
        FileInfo.relativePath(product.sourceDirectory, path),
        product.buildDirectory+'/generated/coreapp/include'
    ]
}
